# ТЕКУЩЕЕ СОСТОЯНИЕ ПРОЕКТА PARAMCONTROL

## 1. Текущее состояние реализации и необходимые исправления

### Реализованные компоненты:
- Базовая структура проекта создана (core, ui, resources)
- Ядро приложения (Parameter, ParameterModel, SotmClient, XmlParser, MonitoringService, AlertManager, LogManager, TmiAnalyzer, UpdateManager)
- Основные классы пользовательского интерфейса (MainWindow, ParameterDialog, ConnectionDialog, LogDialog, KaZsDialog, SettingsDialog, ParameterCardView)
- Модели данных (ParameterTableModel, LogTableModel)

### Необходимые исправления и доработки:

#### Недостающие файлы:
- Необходимо реализовать MainWindow.ui, ParameterDialog.ui, SettingsDialog.ui, ParameterCardView.ui и некоторые другие (проверь!)
- Создать README.md с документацией проекта
- Создать специальные иконки и звуковые файлы в src/resources

#### Функциональные доработки:
1. Реализовать автопрокрутку лога событий в главном окне
   - При новых событиях лог должен прокручиваться до последней строки
   - Если пользователь выбирает любую строку, кроме последней (нижней), автопрокрутка должна останавливаться
   - Автопрокрутка возобновляется, когда пользователь выбирает последнюю (нижнюю) строку

2. Добавить функцию отключения текущего звукового оповещения клавишей ESC
   - Реализовать обработку клавиши ESC в AlertManager
   - Отключать только текущее оповещение, не блокируя новые

3. Проверить и доработать автоматическое восстановление соединения с СОТМ
   - Убедиться, что MonitoringService автоматически восстанавливает соединение с СОТМ при его потере
   - Реализовать механизм повторных попыток соединения с задержкой 5 сек
   - Добавить четкую индикацию состояния соединения в интерфейсе

4. Реализовать эвристическое определение сбойной ТМИ по параметру СЕК
   - Доработать класс TmiAnalyzer для обнаружения аномальных изменений параметра СЕК
   - Реализовать алгоритм анализа значений СЕК для выявления аномалий
   - Добавить соответствующую индикацию в интерфейсе
   -Параметра СЕК добавляется в запросы к СОТМ всегда помимо прочих. Для него обеспечивается дополнительный технический закулисный контроль, чтобы выявлять сбойтую ТМИ.

5. Реализовать механизм обновления приложения
   - Завершить реализацию класса UpdateManager
   - Добавить проверку обновлений при запуске
   - Реализовать автоматическую установку обновлений

## 2. Инструкции для дальнейшей работы над проектом

### Обзор проекта
ParamControl - это приложение для мониторинга телеметрических параметров космических аппаратов (КА) через систему СОТМ. Приложение позволяет непрерывно контролировать заданные параметры, оповещать операторов при выходе значений за установленные пределы и вести журнал событий.

Проект является переписыванием существующего приложения с C# WinForms на C++/Qt5 для работы в Astra Linux. Архитектура проекта модульная, с четким разделением на ядро (core) и пользовательский интерфейс (ui). 

### Основные характеристики проекта:

#### Взаимодействие с СОТМ:
- Соединение через TCP/IP
- Обмен сообщениями в XML-формате
- Предусмотрен специальный заголовок сообщений фиксированной длины (25 байт)

#### Архитектура приложения:
- **core**: Ядро приложения, содержащее бизнес-логику
  - Parameter: Базовый класс параметра с различными типами проверок (Equals, NotEquals, InLimits, OutOfLimits, Changed)
  - ParameterModel: Модель данных параметров
  - SotmClient: Клиент для взаимодействия с СОТМ
  - XmlParser: Парсер XML-данных
  - MonitoringService: Сервис мониторинга, центральный координирующий компонент
  - AlertManager: Менеджер звуковых оповещений
  - LogManager: Менеджер журналирования
  - TmiAnalyzer: Анализатор телеметрии для обнаружения аномалий
  - UpdateManager: Менеджер обновлений

- **ui**: Пользовательский интерфейс
  - MainWindow: Главное окно приложения
  - ParameterDialog: Диалог для добавления/редактирования параметров
  - ConnectionDialog: Диалог настройки подключения
  - KaZsDialog: Диалог выбора КА и ЗС
  - LogDialog: Диалог просмотра журнала
  - SettingsDialog: Диалог настроек
  - ParameterCardView: Окно карточки параметра
  - ParameterTableModel: Модель таблицы параметров
  - LogTableModel: Модель таблицы журнала

#### Функциональные особенности:
1. **Мониторинг параметров**:
   - Периодический опрос СОТМ
   - Проверка параметров по различным условиям
   - Визуальная и звуковая индикация нарушений

2. **Типы проверок параметров**:
   - Equals: Параметр равен заданному значению
   - NotEquals: Параметр не равен заданному значению
   - InLimits: Значение в заданном диапазоне
   - OutOfLimits: Значение вне заданного диапазона
   - Changed: Фиксация изменения значения

3. **Звуковые оповещения**:
   - Различные звуки для разных типов событий
   - Возможность отключения звука через UI
   - Возможность отключения текущего звука клавишей ESC

4. **Журналирование событий**:
   - Запись в файл и отображение в UI
   - Цветовая индикация: красный для ошибок, зеленый для нормализации
   - Автопрокрутка с возможностью отключения

5. **Интерфейс пользователя**:
   - Двухпанельный интерфейс: таблица параметров и журнал событий
   - Статусные индикаторы (СОТМ, КА, ЗС, ТМИ)
   - Индикатор СЕК с изменяемым цветом фона. Индикатор параметра СЕК должен переключать фон и цвет шрифта (туда-обратно) при каждом изменении. Это позволяет издалека контролировать, что программа не зависла и циклично обрабатывает все параметры. 
   - Кнопки управления мониторингом и звуком

### Требования к реализации интерфейса:
1. Интерфейс должен точно соответствовать дизайну, представленному в SVG-файлах:
   - final-main-window-design.svg: Главное окно
   - parameter-card-view-updated.svg: Карточка параметра
   - updated-parameter-dialog-design.svg: Диалог параметра
   - connection-dialog-design.svg: Диалог соединения
   - log-dialog-design.svg: Диалог журнала
   - kazs-dialog-design.svg: Диалог выбора КА и ЗС
   - settings-dialog-tabs.svg: Вкладки диалога настроек
   - alert-sound-dialog-design.svg: Диалог настройки звуков
   - update-settings-dialog.svg: Настройки обновлений

2. Цветовая схема и расположение элементов должны соответствовать макетам
3. Все состояния элементов должны отображаться согласно дизайну
4. При разработке UI файлов через Qt Designer необходимо строго придерживаться дизайна из SVG-файлов

### Особые требования к реализации:

#### 1. Автопрокрутка лога событий:
- Лог должен автоматически прокручиваться к последней (нижней) строке при появлении новых событий
- Если пользователь кликает на любую строку, кроме последней, автопрокрутка должна останавливаться
- Автопрокрутка должна возобновляться только после того, как пользователь снова выберет последнюю строку лога
- Реализация должна быть в классе MainWindow, взаимодействующем с LogTableModel

#### 2. Отключение звукового оповещения клавишей ESC:
- Клавиша ESC должна отключать только текущее воспроизводимое звуковое оповещение
- Новые оповещения не должны блокироваться после нажатия ESC
- Реализация должна быть через обработчик клавиш в MainWindow и соответствующий метод в AlertManager

#### 3. Автоматическое восстановление соединения с СОТМ:
- MonitoringService должен автоматически определять потерю соединения с СОТМ
- Должен быть реализован механизм повторных попыток подключения
- Состояние соединения должно отображаться в интерфейсе через подключенные сигналы

#### 4. Анализ аномалий в параметре СЕК:
- TmiAnalyzer должен отслеживать изменения параметра СЕК
- Необходимо реализовать алгоритм обнаружения аномалий:
  - Отслеживание слишком быстрых изменений (более 5 единиц в секунду)
  - Обнаружение отсутствия изменений в течение определенного времени
  - Выявление нерегулярных скачков значений
- При обнаружении аномалии должно формироваться уведомление и запись в журнал

#### 5. Требования к оформлению кода:
- Использовать стандарт C++17
- Соблюдать единый стиль во всех файлах
- Использовать префикс m_ для членов класса
- Использовать PascalCase для имен классов и CamelCase для методов и переменных
- Все публичные методы и классы должны иметь документацию в формате Doxygen
- Применять Qt-стиль для сигналов и слотов (new style connection)
- Обеспечивать потокобезопасность с помощью mutex и atomic
- Применять std::shared_ptr и std::unique_ptr вместо сырых указателей

### Используемые технологии:
- C++17
- Qt 5.x
- Мьютексы и атомарные переменные для многопоточности
- XML для обмена данными
- JSON для конфигурации
- Сокеты для сетевого взаимодействия
- Сигналы и слоты Qt для событийной модели

### Форматы файлов:
- Параметры: JSON с комментариями
- Настройки: INI-файлы
- Журнал: Текстовый формат с временными метками

Следуйте этим инструкциям для завершения реализации проекта ParamControl с высоким качеством и соответствием всем требованиям.